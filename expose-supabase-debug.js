// Script pour exposer Supabase dans la console et diagnostiquer
// √Ä coller dans la console du navigateur sur votre page d'ajout

console.log('=== DIAGNOSTIC SUPABASE CONFIGURATION ===');

// 1. V√©rifier si le module Supabase est charg√©
console.log('1. V√âRIFICATION MODULES');
console.log('=======================');

// Chercher Supabase dans les modules Next.js
if (typeof window !== 'undefined') {
    // V√©rifier les variables d'environnement c√¥t√© client
    console.log('Variables d\'environnement d√©tect√©es:');
    console.log('NEXT_PUBLIC_SUPABASE_URL:', process?.env?.NEXT_PUBLIC_SUPABASE_URL || 'NON D√âFINIE');
    console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY:', process?.env?.NEXT_PUBLIC_SUPABASE_ANON_KEY ? 'D√âFINIE' : 'NON D√âFINIE');
    
    // Essayer de trouver Supabase dans les modules webpack
    if (window.__NEXT_DATA__) {
        console.log('‚úÖ Application Next.js d√©tect√©e');
        console.log('Build ID:', window.__NEXT_DATA__.buildId);
    }
    
    // V√©rifier si @supabase/supabase-js est disponible
    try {
        // Essayer d'importer dynamiquement
        import('@supabase/supabase-js').then(({ createClient }) => {
            console.log('‚úÖ Module @supabase/supabase-js disponible');
            
            // Cr√©er un client Supabase temporaire pour test
            const testUrl = prompt('Entrez votre URL Supabase (https://xxx.supabase.co):');
            const testKey = prompt('Entrez votre cl√© anonyme Supabase:');
            
            if (testUrl && testKey) {
                const testClient = createClient(testUrl, testKey);
                window.supabase = testClient;
                
                console.log('‚úÖ Client Supabase cr√©√© et expos√© dans window.supabase');
                console.log('Vous pouvez maintenant tester avec:');
                console.log('window.supabase.auth.getUser()');
                
                // Test rapide
                testClient.auth.getUser().then(({ data, error }) => {
                    if (error) {
                        console.log('‚ùå Erreur auth:', error);
                    } else {
                        console.log('‚úÖ Auth fonctionne:', data.user ? 'Connect√©' : 'Non connect√©');
                    }
                });
                
                // Test de lecture
                testClient.from('profiles').select('*').limit(1).then(({ data, error }) => {
                    if (error) {
                        console.log('‚ùå Erreur lecture profiles:', error);
                    } else {
                        console.log('‚úÖ Lecture profiles fonctionne:', data);
                    }
                });
            }
        }).catch(err => {
            console.log('‚ùå Module @supabase/supabase-js non disponible:', err);
        });
    } catch (err) {
        console.log('‚ùå Import dynamique √©chou√©:', err);
    }
    
    // V√©rifier les erreurs r√©seau
    const originalConsoleError = console.error;
    console.error = function(...args) {
        if (args.some(arg => typeof arg === 'string' && (arg.includes('supabase') || arg.includes('SUPABASE')))) {
            console.log('üîç ERREUR SUPABASE D√âTECT√âE:', ...args);
        }
        originalConsoleError.apply(console, args);
    };
    
    console.log('2. ANALYSE DU FORMULAIRE');
    console.log('========================');
    
    // Analyser le formulaire plus en d√©tail
    const form = document.querySelector('form');
    if (form) {
        console.log('‚úÖ Formulaire trouv√©');
        
        // Chercher tous les inputs
        const allInputs = form.querySelectorAll('input, textarea, select');
        console.log(`üìã Total des champs: ${allInputs.length}`);
        
        allInputs.forEach((input, index) => {
            const type = input.type || input.tagName.toLowerCase();
            const placeholder = input.placeholder || 'N/A';
            const name = input.name || 'N/A';
            const value = input.value || 'vide';
            
            console.log(`  ${index + 1}. ${type} - name:"${name}" - placeholder:"${placeholder}" - value:"${value.substring(0, 50)}${value.length > 50 ? '...' : ''}"`);
        });
        
        // V√©rifier les boutons
        const buttons = form.querySelectorAll('button');
        console.log(`üîò Boutons trouv√©s: ${buttons.length}`);
        buttons.forEach((btn, index) => {
            console.log(`  ${index + 1}. "${btn.textContent?.trim()}" - type:"${btn.type}"`);
        });
    }
    
    console.log('\n3. INSTRUCTIONS SUIVANTES');
    console.log('=========================');
    console.log('Si vous voyez des erreurs Supabase ci-dessus:');
    console.log('1. V√©rifiez votre fichier .env.local');
    console.log('2. Red√©marrez votre serveur de d√©veloppement');
    console.log('3. V√©rifiez que les variables commencent par NEXT_PUBLIC_');
    console.log('4. Essayez de cr√©er un client manuellement avec les prompts ci-dessus');
    
} else {
    console.log('‚ùå Environnement navigateur non disponible');
}
